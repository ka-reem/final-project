plugins {
    id 'java'
    id 'application'
}

group 'com.yourgame'
version '1.0-SNAPSHOT'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    mavenCentral()
}

dependencies {
    // HTTP Client for Groq API calls
    implementation 'com.squareup.okhttp3:okhttp:4.9.3'
    // JSON processing 
    implementation 'com.google.code.gson:gson:2.10.1'
    // PDFBox for PDF processing
    implementation 'org.apache.pdfbox:pdfbox:2.0.29'
    // LMNT for text-to-speech
    implementation 'com.squareup.okhttp3:okhttp:4.10.0'
    // LMNT: for mp3
    implementation 'javazoom:jlayer:1.0.1'  
}

application {
    mainClass = 'game.Game'  // Update to point to the main Game class // previously is game.Game
}

jar {
    manifest {
        attributes(
            'Main-Class': 'game.Game',
            'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' ')
        )
    }
    
    // Include all dependencies in the jar
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    
    // Include resources
    from('src/main/resources') {
        include 'map.png'
        include 'tank1.png'
        include 'config.properties'
    }
    
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Task to create a release directory with everything needed
task release(type: Copy) {
    dependsOn jar
    from jar.archiveFile
    from configurations.runtimeClasspath
    into "$buildDir/release"
}

tasks.register('createAudioDir') {
    doLast {
        mkdir "${projectDir}/audio"
    }
}

tasks.register('createVenv') {
    dependsOn 'createGitignore'
    doLast {
        exec {
            commandLine 'python3', '-m', 'venv', "${projectDir}/venv"
        }
        
        // Create .env file with LMNT API key
        def envFile = new File("${projectDir}/.env")
        if (!envFile.exists()) {
            envFile << "LMNT_API_KEY=${project.hasProperty('lmntApiKey') ? project.lmntApiKey : System.getenv('LMNT_API_KEY')}"
        }
        
        // Install dependencies in venv
        if (System.properties['os.name'].toLowerCase().contains('windows')) {
            exec {
                commandLine "${projectDir}/venv/Scripts/pip", 'install', 'lmnt', 'python-dotenv'
            }
        } else {
            exec {
                commandLine "${projectDir}/venv/bin/pip", 'install', 'lmnt', 'python-dotenv'
            }
        }
    }
}

// Update the run task to only depend on the necessary tasks
tasks.named('run') {
    dependsOn 'createAudioDir'
    dependsOn 'createVenv'
}

// Add .gitignore entry for venv and audio directories
tasks.register('createGitignore') {
    doLast {
        def gitignore = new File("${projectDir}/.gitignore")
        if (!gitignore.exists()) {
            gitignore.text = """
venv/
audio/
*.mp3
"""
        } else if (!gitignore.text.contains("venv/")) {
            gitignore.append("\nvenv/\naudio/\n*.mp3\n")
        }
    }
}



